environment_variables:
  PROMPTFLOW_NAME: libraire
  PF_DISABLE_TRACING: true
  LANG_DISABLE_TRACING: true
$version: 1.0.0
environment:
  python_requirements_txt: requirements.txt
additional_includes:
- ../src
inputs:
  repository_name:
    type: string
    default: Instructor
  cache_id:
    type: string
    default: cachedContents/3xn5x0ed6u62
  documentation:
    type: object
    default: {}
  user_problem:
    type: string
    default: You are an expert python developper. I need to get the number of
      attemps it took the model to get the task rigth
  documentation_md:
    type: object
    default: {}
  config:
    type: object
    default: {}
  GEMINI_API_KEY:
    type: string
    default: ""
  ANTHROPIC_API_KEY:
    type: string
    default: ""
  OPENAI_API_KEY:
    type: string
    default: ""
outputs:
  libraire_response:
    type: string
    reference: ${code_generator.output}
nodes:
- name: prompt_user_rewriter
  type: prompt
  source:
    type: code
    path: prompts/prompt_rewrite/user_prompt_rewrite.jinja2
  inputs:
    user_query: ${inputs.user_problem}
- name: prompt_system_rewriter
  type: prompt
  source:
    type: code
    path: prompts/prompt_rewrite/system_prompt_rewrite.jinja2
  inputs:
    library_name: ${inputs.repository_name}
- name: rewriter
  type: python
  source:
    type: code
    path: tools/query_rewrite.py
  inputs:
    user_prompt: ${prompt_user_rewriter.output}
    symstem_prompt: ${prompt_system_rewriter.output}
    GEMINI_API_KEY: ${inputs.GEMINI_API_KEY}
    ANTHROPIC_API_KEY: ${inputs.ANTHROPIC_API_KEY}
    OPENAI_API_KEY: ${inputs.OPENAI_API_KEY}
- name: prompt_system_librari_retriver
  type: prompt
  source:
    type: code
    path: prompts/system_prompt_librari_retriver.jinja2
  inputs:
    repository_name: ${inputs.repository_name}
- name: prompt_user_librari_retriver
  type: prompt
  source:
    type: code
    path: prompts/user_prompt_librari_retriver.jinja2
  inputs:
    user_problem: ${rewriter.output.goal_rewrite}
- name: librairi_retriver
  type: python
  source:
    type: code
    path: tools/libaire.py
  inputs:
    user_prompt: ${prompt_user_librari_retriver.output}
    symstem_prompt: ${prompt_system_librari_retriver.output}
    documentation: ${inputs.documentation}
    cache_id: ${inputs.cache_id}
    GEMINI_API_KEY: ${inputs.GEMINI_API_KEY}
    ANTHROPIC_API_KEY: ${inputs.ANTHROPIC_API_KEY}
    OPENAI_API_KEY: ${inputs.OPENAI_API_KEY}
- name: user_prompt_config_retriver
  type: prompt
  source:
    type: code
    path: prompts/prompt_user_config_retriver.jinja2
  inputs:
    user_problem: ${rewriter.output.goal_rewrite}
- name: md_config_retriver
  type: python
  source:
    type: code
    path: tools/parse.py
  inputs:
    symstem_prompt: ${prompt_system_librari_retriver.output}
    user_prompt: ${user_prompt_config_retriver.output}
    config_doc: ${inputs.config}
    documentation_md: ${inputs.documentation_md}
    GEMINI_API_KEY: ${inputs.GEMINI_API_KEY}
    ANTHROPIC_API_KEY: ${inputs.ANTHROPIC_API_KEY}
    OPENAI_API_KEY: ${inputs.OPENAI_API_KEY}
- name: prompt_user_code_generator
  type: prompt
  source:
    type: code
    path: prompts/prompt_coder/user_prompt_code_generator.jinja2
  inputs:
    user_problem: ${inputs.user_problem}
- name: prompt_system_code_generator
  type: prompt
  source:
    type: code
    path: prompts/prompt_coder/system_prompt_code_generator.jinja2
  inputs:
    repository_name: ${inputs.repository_name}
- name: code_generator
  type: python
  source:
    type: code
    path: tools/code_generator.py
  inputs:
    files_list: ${librairi_retriver.output.files_list}
    documentation: ${inputs.documentation}
    documentation_md: ${inputs.documentation_md}
    config: ${inputs.config}
    cache_id: ${inputs.cache_id}
    symstem_prompt: ${prompt_system_code_generator.output}
    user_prompt: ${prompt_user_code_generator.output}
    files_list_md_config: ${md_config_retriver.output.files_list}
    GEMINI_API_KEY: ${inputs.GEMINI_API_KEY}
    ANTHROPIC_API_KEY: ${inputs.ANTHROPIC_API_KEY}
    OPENAI_API_KEY: ${inputs.OPENAI_API_KEY}
